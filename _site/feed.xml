<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>月牙旁，你轻颦浅笑</title>
    <description>O ever youthful, O ever weeping.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Feb 2018 12:01:41 +0800</pubDate>
    <lastBuildDate>Wed, 21 Feb 2018 12:01:41 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>路径依赖</title>
        <description>&lt;p&gt;上次全哥培训的时候提到了「路径依赖」一词，单从字面意思理解就是像惯性一样对某一条路产生了依赖，走不出去。&lt;/p&gt;

&lt;p&gt;最近看到一个关于熊猫的故事，让我对这个词有了更深刻的理解。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;当年熊迁徙到秦岭，那里是南北分界线，气候特征既像北方又像南方，同时生长着只有低纬度长的植物竹子。熊来的这里看到一片竹海就发生了生活习性的变化。因为竹子取之不尽它们就只吃竹子；冬天也有东西吃它们就不冬眠了。
下面有几个关于熊猫和竹子的特点&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;熊猫每天吃16小时的竹子；&lt;/li&gt;
    &lt;li&gt;一片竹林是有一个母竹长出来的，其寿命全部与母竹林保持一致&lt;/li&gt;
    &lt;li&gt;竹子一生只开一次花，结一次果。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;从上面的故事中，熊猫就面临了几种困境。食物单一，当竹子集体死亡时就会因为没有食物而饿死；繁殖能力低，因为每天把体能都耗费在吃竹子上导致性欲低下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;熊猫就是因为被它所拥有的资源绑架了，产生了一种「路径依赖」。当路径不见了或者发生了塌陷时，它们就陷入了危机之中，甚至可能毁灭。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;公司，人，都可能陷入「路径依赖」。一种资源看上去是福音，但是可能会暗中绑架你，最后让你陷入困境；这就需要我们时刻保持警觉性，不仅要去发现，更要有勇气去改变。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 18 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/Path-Dependence/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/Path-Dependence/</guid>
        
        <category>成长</category>
        
        
      </item>
    
      <item>
        <title>像电脑一样思考</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;如果每个人的「硬件配置」都差不多，那么「软件」和「操作方式」就是最大化电脑效率的方式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先明白自己「计算能力」有限：当计算机超负荷运行的时候，CPU超频，发热严重，甚至出现卡顿。如果我们自己超负荷，多任务的工作也会这样，也许身体不能支撑，也许效率不高工作质量差。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迭代能力：计算机不断的更新软件，更新语言，更新操作方式就是为了在不改变配置的基础上做更多的事。而我们则也一样，需要不断的学习积累知识，运用知识来改善自己的「软件性能」。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;兼容性：流行的编程语言兼容多个平台；操作系统通过虚拟机兼容不同格式的软件。而我们则要学会用合适的方式去「兼容」不同的人、不同的观点。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过电脑的方式思考让自己变得更理智&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sat, 10 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/Think-Like-A-Computer/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/Think-Like-A-Computer/</guid>
        
        <category>成长</category>
        
        
      </item>
    
      <item>
        <title>手段与目的</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;什么是手段？什么是目的？如果本末倒置会怎样？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;看到过很多偏执的人，无论是周围的人，还是网络上，甚至是我自己，都会对某种方式很执着，就像坚信某某某是世界上最好的语言，某某某是最好最优雅的方式。但是转念一想我们这种执着到底是针对目的还是手段，如果是针对手段的执着，那么我们这种执着是否是错的？因为明明目的才是最重要的，为何要对手段这么的偏执？难道是说我们把手段误解成了目的，所以我们才对手段的完美如此执着？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当目的是明确的时，手段只是为了达到目的的做法，当规则固定的情况下，可以使用不同的手段达成目的。如果本末倒置呢？那么就会发生不断的去追求最完美的却不一定是效率最高的手段，但是目的达成的效果都一样，这样无疑是一种浪费。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;很多时候我们分不清目的和手段，经常把手段当成了目的。如果幸福的生活是目的，那么努力的工作只是一种手段；如果求知是一种目的，那么阅读只是一种手段；如果给客户更好的使用体验是一种目的，那么技术只是一种手段。能够准确的明白手段与目的，就像是能够分清楚主次一样。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;也许我不在乎你的手段，只在乎你的目的。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 17 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/Method-And-Purpose/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/Method-And-Purpose/</guid>
        
        <category>成长</category>
        
        
      </item>
    
      <item>
        <title>驱动表和被驱动表</title>
        <description>&lt;p&gt;当两表发生关联的时候就会有驱动表和被驱动表之分，驱动表也叫外表（R表），被驱动表也叫做内表（S表）。一般我们将小表当做驱动表（指定了联接条件时，满足查询条件的记录行数少的表为「驱动表」,未指定联接条件时，行数少的表为「驱动表」；MySQL 内部优化器也是这么做的）。以下有两点需要注意：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;两表关联&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;当两表通过索引建立关联时，驱动表不需要建立索引，被驱动表有索引即可，这样就能利用上索引了；不过为了避免发生弄错的情况，两个表都建立索引也可以。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;排序&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;对驱动表可以直接排序，对非驱动表（的字段排序）需要对循环查询的合并结果（临时表）进行排序，所以 EXPLAIN 中会出现 using temporary 的情况，效率降低。所以我们尽量保证排序用的是驱动表字段。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 25 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/R-S-Table/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/R-S-Table/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
      <item>
        <title>主动探索创新</title>
        <description>&lt;p&gt;模仿—改进—创新，起初从不了解行业的模式，模仿竞争对手；到不断跟随客户使用情况改进现有的功能；接下来我们将要去主动面对创新，思考出客户没发现但是能让客户明显改善的功能，同时带来明显的差异化功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;最近经常遇到有些功能，需要上线给客户，等到客户反馈之后再做出相应的改进和调整。这说明我们还是有很多地方停留在改进的层次，也就是很大程度上我们还是只停留在了第二步。但是还是要提前的去思考、去准备迈入第三步。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;对于第三步的创新我有点自己的看法，在软件中去创新我认为有两个方向：
    &lt;ol&gt;
      &lt;li&gt;像 ipad 一样，设计出来之前从来没人觉得自己需要一个平板；设计出来之后人人都觉得应该有个平板。所以第一个方向就是去思考连客户自己也没有意识到需要的功能，这种东西设计出来的目的并不一定是为了客户的效率，是为了让客户用的舒服，用的习惯，用的离不开。&lt;/li&gt;
      &lt;li&gt;第二个方向就是给予使用者正反馈。通过反馈让客户有学习的欲望，同时也让使用者感觉到他们在进步，尽管只是使用软件，也会让他们不那么枯燥。相对于死记硬背，反馈的形式也许正是客户想要的。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;我们常说效率的提高是通过简化流程或者自动化的形式呈现，这也许是最吸引客户的买点，毕竟客户花大价钱买软件最重要的目的是为了省钱或赚钱。但是当客户已经使用我们软件了，我们应该让他们越用越舒服，这种舒服不仅仅是功能的全部实现，肯定还有另外一种形式的存在，是哪种形式存在就需要我们不断摸索了。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 18 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/Active-Exploration-And-Innovation/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/Active-Exploration-And-Innovation/</guid>
        
        <category>成长</category>
        
        
      </item>
    
      <item>
        <title>安装 MySQL 5.7（源码安装）</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;服务器：Ubuntu 16.04 64位&lt;/li&gt;
    &lt;li&gt;安装方式：二进制安装&lt;/li&gt;
    &lt;li&gt;安装版本：5.7.20&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先进入到相应目录 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd /usr/local&lt;/code&gt; 下载二进制文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz&lt;/code&gt;，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解压文件并建立软连接 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo tar -zxvf mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ln -s mysql-5.7.20 mysql&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/MySQL5.7-install/image01.png&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;建立用户组 &lt;code class=&quot;highlighter-rouge&quot;&gt;groupadd mysql&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增加用户 &lt;code class=&quot;highlighter-rouge&quot;&gt;useradd -r -g mysql -s /bin/false mysql&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;5.7 版本的通用二进制安装包经解压后得到的 MySQL 目录，内部并未包含数据文件存放的目录，所以需要单独再创建一个子目录用于存放数据文件，比如取名为 data &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir data&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;初始化 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/MySQL5.7-install/image02.png&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MySQL有对依赖libaio 库。如果此库未在本地安装Data目录的初始化和后续服务器启动的步骤将失败。
apt-get install libaio1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;再次初始化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/MySQL5.7-install/image03.png&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/MySQL5.7-install/image04.png&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;编辑配置文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/my.cnf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]
port = 3306
user = mysql
basedir = /usr/local/mysql
datadir = /usr/local/mysql/data
log-error = /var/log/mysql-error.log
log_timestamps=SYSTEM
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;启动 MySQL &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/mysqld_safe –user=mysql &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/MySQL5.7-install/image05.png&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;要求修改密码 &lt;code class=&quot;highlighter-rouge&quot;&gt;set password=password('这里是你的密码');&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Linux 下为了安全，默认是不允许 MySQL 服务器本机以外的机器访问 MySQL 数据库服务的，因此需要重新授权 root 账号。方便其他机器远程访问 MySQL 服务器，MySQL 命令如下：&lt;code class=&quot;highlighter-rouge&quot;&gt;grant all privileges on *.* to root@'%' identified by '你的密码';&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改权限后使用命令立即生效 &lt;code class=&quot;highlighter-rouge&quot;&gt;flush privileges;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld&lt;/code&gt; 之后就可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;service mysqld start&lt;/code&gt; 启动服务了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更改环境变量，到根目录 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~&lt;/code&gt; 修改.bashrc
 &lt;code class=&quot;highlighter-rouge&quot;&gt;vim .bashrc&lt;/code&gt; 添加&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=$PATH:/usr/local/mysql/bin
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 11 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/MySQL5.7-install/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/MySQL5.7-install/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
      <item>
        <title>双十一优化总结（2017）</title>
        <description>&lt;h4 id=&quot;操作频繁小表宁愿绕点弯路也尽量避免被锁住&quot;&gt;操作频繁小表宁愿绕点弯路也尽量避免被锁住&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;对于频繁操作的小表，就算锁住的是其中一行记录，也有可能造成难以预期的锁等待。&lt;/li&gt;
  &lt;li&gt;对于这样的表可以先将值读到变量里，再对变量进行操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;延迟关联&quot;&gt;延迟关联&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;这种操作经常会在大的搜索中出现，先通过索引 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 出想要的数据中主表的主键值，然后将这个结果集与主表关联读出想要的数据，这样做延缓了回表时间。因为大的搜索都涉及到分页，如果翻页的时候就回表查会大大降低效率，而通过仅读出主键（不回表）先确定要读出来的值，最后将确定要读的数据的主键跟主表关联得出真正想要的数据。在搜索卡顿的时候把这种方式作为优化方式之一。&lt;/li&gt;
  &lt;li&gt;导出的时候（因为导出是导出所有数据，而不是像搜索一样只需要某一页的数据，但是又不能一次性将数据读出来否则开销太大）也可以将所有的想要的数据的主表主键存到一张临时表中，然后这张临时表自身的主键就是递增的，一页一页读出数据的时候直接可以通过主键来个范围查找。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;延迟关联一定要理解索引的二次查找&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;有时候为了避免锁住表可以将需要的数据放入临时表然后释放原有表剩下的操作交给临时表&quot;&gt;有时候为了避免锁住表，可以将需要的数据放入临时表，然后释放原有表，剩下的操作交给临时表。&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;如果一个事务比较大，锁住表的数据比较多，建议将需要的数据存到临时表中，之后通过临时表做操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;检查索引失效的地方&quot;&gt;检查索引失效的地方&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;注意 &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; 条件里索引字段的隐式转换导致索引失效，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR&lt;/code&gt;类型跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt; 类型比较，导致索引失效&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; 条件里出现函数时导致索引失效，这也算一种特殊的隐式转换导致索引失效。（有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; 条件里出现函数并没有导致索引失效那是因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 的字段都是索引字段，这样直接走了索引）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;存储过程&quot;&gt;存储过程&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;对于存储过程（不涉及逻辑），主要需要注意的是当出现事务时，事务要尽可能小（锁粒度）；避免出现事务嵌套；不符合条件是要回滚；以及要加上异常处理的捕捉（SQLEXCEPTION）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;数据库监控mysql56&quot;&gt;数据库监控（MySQL5.6）&lt;/h4&gt;
&lt;p&gt;暂时我们对于数据库的监控主要集中在慢查询和死锁的监控，而这两者的寸文件都比较大（都只存放在单一文件中），所以同时要配合上相应的工具进行分析。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先我们先开启 MySQL 的慢查询日志和打印死锁日志的配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### 慢查询
slow_query_log = ON
slow_query_log_file = 「路径」（可自己配置，也可以用默认配置）

### 死锁
innodb_print_all_deadlocks = ON
死锁日志记录在@@log_error的路径里，SELECT @@log_error 即可得到路径
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;接下来是有关慢查询日志的分析，首先可以使用 MySQL 自带的工具 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldumpslow&lt;/code&gt;，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldumpslow 日志路径&lt;/code&gt; 就可以分析出相应数据（需要将 /usr/local/mysql/bin 配置在环境变量中才可以直接使用该命令）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;部分截图：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@jstumv2ppgydxc ~]# mysqldumpslow /data/mysql/slow.log 

Reading mysql slow query log from /data/mysql/slow.log
Count: 174  Time=122.97s (21397s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@[10.24.232.120]
  CALL SP_SALES_DELIVER_ALL(N)

Count: 2  Time=51.98s (103s)  Lock=0.00s (0s)  Rows=0.0 (0), u_wms_yace_wms[u_wms_yace_wms]@[10.24.232.120]
  CALL SP_STOCKOUT_ORDER_NEW_PRINT_BATCH(N,N,N,'S','S',N)

Count: 16  Time=43.49s (695s)  Lock=0.00s (0s)  Rows=0.0 (0), root[root]@[10.24.232.120]
  CALL SP_STOCKOUT_SALES_EXAMINE_YACE()

Count: 3  Time=42.91s (128s)  Lock=0.00s (0s)  Rows=0.0 (0), u_wms_yace_wms[u_wms_yace_wms]@[10.24.232.120]
  CALL SP_STOCKOUT_ORDER_CLEAR_POSITION('S')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;同样可以使用 percona 发布的 percona toolkit 工具集中的 pt-query-digest，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;pt-query-digest 日志路径&lt;/code&gt;也可以直接分析出&lt;/p&gt;

&lt;p&gt;部分截图：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Current date: Sat Oct 21 22:20:30 2017
# Hostname: jstumv2ppgydxc
# Files: /data/mysql/slow.log
# Overall: 3.17k total, 24 unique, 0.02 QPS, 0.27x concurrency ___________
# Time range: 2017-10-18 18:05:49 to 2017-10-20 18:14:29
# Attribute          total     min     max     avg     95%  stddev  median
# ============     ======= ======= ======= ======= ======= ======= =======
# Exec time         47165s    40us  15395s     15s     32s    263s      6s
# Lock time           19ms       0   663us     5us    47us    21us       0
# Rows sent         26.47k       0   2.93k    8.54       0  137.13       0
# Rows examine     127.95M       0   8.61M  41.29k   7.31k 323.35k       0
# Query size         6.48M      20   3.78k   2.09k   3.69k   1.55k  874.75

# Profile
# Rank Query ID           Response time    Calls R/Call   V/M   Item
# ==== ================== ================ ===== ======== ===== ==========
#    1 0x9E8F5EE69306720A 21397.2866 45.4%   174 122.9729 10... CALL SP_SALES_DELIVER_ALL
#    2 0x17294978B68E5993 10369.9098 22.0%  1462   7.0930  0.66 CREATE TABLE tmp_sales_trade
#    3 0x6185E750B8987C9F  8895.4684 18.9%  1253   7.0993  0.69 CREATE TABLE tmp_sales_order
#    4 0xD8639FBEF5336A31  1869.5757  4.0%    78  23.9689  6.47 CALL SP_SALES_TRADE_CHECK
#    5 0x8221D835D186C3C0  1459.2881  3.1%    39  37.4176 17.71 CALL SP_STOCKOUT_ORDER_ALLOCATE_POSITION
#    6 0x1DFDB7C755EF165F   742.0276  1.6%    49  15.1434 24.68 CALL SP_STOCKOUT_SALES_CONSIGN_YACE
#    7 0x15466970CA5A18BE   695.8046  1.5%    16  43.4878  3.13 CALL SP_STOCKOUT_SALES_EXAMINE_YACE
#    8 0x3BB79BA58D9F55C8   421.7239  0.9%    16  26.3577  3.05 CALL SP_STOCK_SALES_BATCH_WEIGHT_YACE
#    9 0x616597AC774D30AC   411.8184  0.9%    15  27.4546 13.40 CALL SP_STOCKOUT_ORDER_WORKER_REGISTER_YACE
#   10 0x3603F7E663B62543   326.7144  0.7%    13  25.1319  1.62 CALL SP_SALES_TRADE_CHECK_YACE
#   11 0xC52C19BBB184BA0B   150.0959  0.3%    19   7.8998  2.15 CALL SP_STOCKOUT_ORDER_SALES_PRINT_QUERY
# MISC 0xMISC               425.5899  0.9%    39  10.9126   0.0 &amp;lt;13 ITEMS&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;对于死锁信息 MySQL 只能直接存储过相应文件中，并没有合适的工具分析，而且开启后性能也有一定的影响，所以一般使用 pt-deadlock-logger 来分析，在监控的时候打开，将错误信息打印在屏幕上，并且可以在选择打印的同时将信息保存到指定的表里一份，不监控的时候关闭即可，比较方便。
命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;pt-deadlock-logger  --create-dest-table --dest D=test,t=deadlocks u=pt,p=pt,P=3306,h=114.55.33.223&lt;/code&gt;，这时候如果出现死锁情况会直接打印在界面上并记录到 deadlocks 表中一份，下面是 test 库下，deadlocks 的表内容：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[pt@localhost][test]&amp;gt; select *from deadlocks limit 1\G
*************************** 1. row ***************************
   server: 114.55.33.223
       ts: 2017-10-20 10:48:49
   thread: 931047
   txn_id: 0
 txn_time: 0
     user: root
 hostname: 
       ip: 10.24.232.120
       db: d_wms_yace_wms
      tbl: stock_spec
      idx: PRIMARY
lock_type: RECORD
lock_mode: X
wait_hold: w
   victim: 0
    query: UPDATE stockout_order_detail sod ,stock_spec ss SET ss.allocating_num=ss.allocating_num-sod.num WHERE sod.stockout_id=P_StockoutId AND sod.spec_id=ss.spec_id AND ss.warehouse_id=P_WarehouseId AND owner_id=V_OwnerId
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;对于监控一定要在性能允许的基础上展开，如果性能消耗大则在测试环境开启就好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;这里稍微提及下 MySQL DML 使用方式上的注意点，以及导致发生锁的几种方式，不会详细的介绍各种锁类型的锁方式。&lt;/p&gt;

&lt;p&gt;首先说一个需要非常注意的操作：&lt;/p&gt;

&lt;h4 id=&quot;insert-into-select&quot;&gt;INSERT INTO SELECT&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;对于 INSERT INTO SELECT 这个操作要尤其注意，因为它不仅仅锁 INTO 的表，还会锁 SELECT FROM 后的表（两个表产生的锁是记录锁还是表锁视情况而定）。&lt;/li&gt;
  &lt;li&gt;条件允许的情况下，尽量通过 INSERT VALUES 来进行替代&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;你所忽视的互相锁住的注意点&quot;&gt;你所忽视的互相锁住的注意点&lt;/h4&gt;
&lt;p&gt;都知道死锁的真正原因是事务互相持有的锁导致都无法释放，所以产生死锁需要释放一个重启一个事务来让另一个事务先执行完。最常遇到的死锁情况无疑是「当两个事务同时操作几条记录时，因为顺序的不一致产生的互相持有的锁（A-B-C，C-B-A）」。但有时候你却意识不到你导致了互相持有操作。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;「AB-BA 的锁」
对于操作同一个表，一个事务用了 GROUP BY，另一个什么都没用，当同时触发的时候就可能导致死锁，因为 GROUP BY操作会默认 ORDER BY 一下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「主键和二级索引引发的锁」
对于通过索引来锁住记录的情况，当一个事务 T1 用唯一索引锁住了 A 表中的记录 B，另一个事务 T2 通过主键同样锁住了A表中的记录B；这时如果 T2 又想通过唯一索引持有 A 表中 B 记录，T1 想通过主键持有 A 表中的 B 记录时就会产生死锁，所以对索引的使用也需要进行分析。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「两个S-lock互相锁住」&lt;/p&gt;

    &lt;p&gt;x 表中字段 a 是唯一索引&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;事务一 (T1)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;事务二 (T2)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;事务三 (T3)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;begin;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;begin;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;begin;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DELETE FROM x WHERE a = 1;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INSERT INTO x (a) VALUES (1); – 等待锁&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INSERT INTO x (a) VALUES (1); – 等待锁&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;commit;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;T1 commit时，T2, T3 的 INSERT 操作都获得 S-lock，然后都想对 a = 1 的记录加上 x-lock，却被互相的 x-lock 锁住&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「S锁到X锁不能直接继承过去」&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;事务一 (T1)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;事务二 (T2)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;begin;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;begin;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SELECT * FROM x WHERE a = 1 LOCK IN SHARE MODE; – 持有了s锁&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DELETE FROM x WHERE a = 1; – 欲获得x锁，暂时等待&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DELETE FROM x WHERE a = 1; – 也要请求x锁，但是不能从s锁直接继承过来，所以也等待，需要排在 T2 后面&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;commit;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这时候就形成了T2 -&amp;gt; T1, T1 -&amp;gt; T2 的情况，造成死锁。&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/Double-Eleven-Optimization-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/Double-Eleven-Optimization-2017/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
      <item>
        <title>Ubuntu 上构建 Ghost 环境</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Ghost是基于Node.js的博客系统，所以首先需要安装Node环境。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1-安装node&quot;&gt;1 安装node&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install -y python-software-properties python g++ make  
sudo add-apt-repository ppa:chris-lea/node.js  
sudo apt-get install nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;删除node用apt-get remove nodejs 即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;检查是否安装成功：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node -v
v4.2.6
npm -v
3.5.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;两个命令都显示出版本号即为安装成功。&lt;/p&gt;

&lt;h3 id=&quot;2-安装nginx&quot;&gt;2 安装Nginx&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install nginx 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来需要配置Nginx，首先进入/etc/nginx目录，删除/etc/nginx/sites-enabled目录下的默认配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /etc/nginx/
sudo rm sites-enabled/default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在/etc/nginx/sites-available/目录下创建ghost文件夹&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo touch /etc/nginx/sites-available/ghost
sudo vim /etc/nginx/sites-available/ghost
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将下面的配置粘贴&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80;
    server_name 你的域名;
    location / {
        proxy_set_header   X-Real-IP $remote_addr;
        client_max_body_size 50m;
        proxy_set_header   Host      $http_host;
        proxy_pass         http://127.0.0.1:2368;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建一个软连接&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ln -s /etc/nginx/sites-available/ghost /etc/nginx/sites-enabled/ghost
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后重启Nginx&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为了安全起见，创建一个用户，获取唯一访问/var/www/ghost的特权&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo adduser --shell /bin/bash --gecos 'Ghost application' ghost
sudo chown -R ghost:ghost /var/www/ghost/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在使用ghost用户&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;su - ghost
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3-安装ghost&quot;&gt;3 安装Ghost&lt;/h3&gt;
&lt;p&gt;创建一个文件夹放Ghost&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir -p /var/www
cd /var/www
sudo wget https://ghost.org/zip/ghost-latest.zip
sudo unzip -d /var/www/ghost ghost-latest.zip
sudo npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果不能解压，是因为没有解压工具，安装解压工具即可：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install unzip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改配置文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ghost
sudo cp config.example.js config.js  
sudo vim config.js 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果提示vim不存在，则安装vim，或者直接用vi&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install vim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将下面的东西添加到配置文件,只需配置production和server即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
config = {
    // ### Production
    // When running Ghost in the wild, use the production environment
    // Configure your URL and mail settings here
    production: {
        url: 'http://my-ghost-blog.com',
###将url改成想关联的域名，注意带上http
        mail: {
            // Your mail settings
        },
        database: {
            client: 'sqlite3',
            connection: {
                filename: path.join(__dirname, '/content/data/ghost.db')
            },
            debug: false
        },

        server: {
            // Host to be passed to node's `net.Server#listen()`
            host: '127.0.0.1',
###将‘127.0.0.1’改为‘0.0.0.0’
###此处改为0.0.0.0是为了跟域名绑定的时候做准备
            // Port to be passed to node's `net.Server#listen()`, for iisnode s$
            port: '2368'
        }
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在Ghost目录（/var/www/ghost）安装Ghost以来的npm包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install --production
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果内存是512M，安装时可能出现内存不足安装不成功的现象，通过Liunx上增加swap空间的方式来解决这个问题。安装完成后目录下就会出现node_modules文件夹&lt;/p&gt;

&lt;h3 id=&quot;31-启动ghost&quot;&gt;3.1 启动Ghost&lt;/h3&gt;
&lt;p&gt;首先重启Nginx&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后开启Ghost&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /var/www/ghost
npm start --production
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们需要让ghost一直运行，首先安装forever&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install -g forever
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NODE_ENV=production forever start index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;检查是否正常挂载&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;forever list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data:        uid  command         script   forever pid   id logfile                 uptime
data:    [0] gBb2 /usr/bin/nodejs index.js 21343   21373    /root/.forever/gBb2.log 0:0:0:3.620
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个则表示正常挂载，结束命令为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;forever index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 30 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/Ubuntu-Create-Ghost/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/Ubuntu-Create-Ghost/</guid>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Linux 命令</title>
        <description>&lt;p&gt;展示命令&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#ls&quot;&gt;ls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ps&quot;&gt;ps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#awk&quot;&gt;awk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find&quot;&gt;find&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#grep&quot;&gt;grep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;操作命令&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#copy&quot;&gt;cp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mv&quot;&gt;mv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rm&quot;&gt;rm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tar&quot;&gt;tar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#zip,unzip&quot;&gt;zip,unzip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cat&quot;&gt;cat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kill&quot;&gt;kill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他命令&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#crontab&quot;&gt;crontab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#内链接，外链接&quot;&gt;内链接，外链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ls&quot;&gt;ls&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;ls&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -lS                 按大小降序排列
ls -lr                 按文件名降序
ls -lrt                按时间降序
ls -lnt                按时间升序
ls -l | sort -k9       按文件名升序（ls的默认输出方式）
ls -l | sort -n -k5    按大小升序
ls -l | sort -rk9      按文件名降序
ls -l -d */            只显示目录
ls -l |grep -v &quot;^d&quot;    只显示文件
-l ：列出长数据串，包含文件的属性与权限数据等  
-a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）  
-d ：仅列出目录本身，而不是列出目录的文件数据  
-h ：将文件容量以较易读的方式（GB，kB等）列出来  
-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;ps&quot;&gt;ps&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;ps&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ps 命令最常用的还是用于监控后台进程的工作情况，因为后台进程是不和屏幕键盘这些标准输入/输出设备进行通信的，所以如果需要检测其情况，便可以使用 ps 命令了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;直接使用 ps，会展示出 PID（进程ID）、TTY（终端名称）、TIME（进程执行时间）、CMD（该进程的命令行输入）四列数据。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-e 显示所有进程。
-f 全格式。
-h 不显示标题。
-l 长格式。
-w 宽输出。
a  显示终端上的所有进程，包括其他用户的进程。
r  只显示正在运行的进程。
x  显示没有控制终端的进程。
u  user用户名
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;比较常使用的是ps aux『查看系统所有的进程数据』 和 ps -ef&lt;/p&gt;

&lt;h3 id=&quot;awk&quot;&gt;awk&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;awk&quot;&gt;&lt;/a&gt;
awk是一个文本分析工具&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;find&quot;&gt;find&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;find&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-mtime  n : n为数字，意思为在n天之前的“一天内”被更改过的文件  
-mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名
-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名
-newer file : 列出比file还要新的文件名
「例如」  
find /root -mtime 0 # 在当前目录下查找今天之内有改动的文件
    
-user name : 列出文件所有者为name的文件  
-group name : 列出文件所属用户组为name的文件  
-uid n : 列出文件所有者为用户ID为n的文件  
-gid n : 列出文件所属用户组为用户组ID为n的文件  
「例如」  
find /home/test -user test# 在目录/home/test中找出所有者为test的文件  
   
-name filename ：找出文件名为filename的文件  
-size [+-]SIZE ：找出比SIZE还要大（+）或小（-）的文件  
-type TYPE ：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、
目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）
-perm  mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755
-perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示  
-perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示  
「例如」
find / -name passwd `查找文件名为passwd的文件`  
find . -perm 0755 `查找当前目录中文件权限的0755的文件`  
find . -size +12k `查找当前目录中大于12KB的文件，注意c表示byte`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;grep&quot;&gt;grep&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;grep&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一种强大的文本搜索工具，可使用正则表达式搜索文本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;crontab&quot;&gt;crontab&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;crontab&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定时运行任务的工具&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cp&quot;&gt;cp&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;copy&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;复制文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-a ：将文件的特性一起复制
-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份
-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行
-r ：递归持续复制，用于目录的复制行为
-u ：目标文件与源文件有差异时才会复制
「例如」
cp -a file1 file2 `连同文件的所有特性把文件file1复制成文件file2`  
cp file1 file2 file3 dir `把文件file1、file2、file3复制到目录dir中` 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mv&quot;&gt;mv&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;mv&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;移动文件、文件夹或更改名字&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖
-i ：若目标文件已经存在，就会询问是否覆盖
-u ：若目标文件已经存在，且比目标文件新，才会更新
mv file1 file2 file3 dir `把文件file1、file2、file3移动到目录dir中`
mv file1 file2 `把文件file1重命名为file2`  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是&lt;code class=&quot;highlighter-rouge&quot;&gt;目录&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;rm&quot;&gt;rm&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;rm&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;删除文件或文件夹&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-f ：就是force的意思，忽略不存在的文件，不会出现警告消息  
-i ：互动模式，在删除前会询问用户是否操作  
-r ：递归删除，最常用于目录删除，它是一个非常危险的参数
rm -i file `删除文件file，在删除之前会询问是否进行该操作`
rm -fr dir `强制删除目录dir中的所有文件`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tar&quot;&gt;tar&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;tar&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;该命令用于对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-c ：新建打包文件  
-t ：查看打包文件的内容含有哪些文件名  
-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中  
-j ：通过bzip2的支持进行压缩/解压缩  
-z ：通过gzip的支持进行压缩/解压缩  
-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来  
-f filename ：filename为要处理的文件  
-C dir ：指定压缩/解压缩的目录dir
『例子』
压缩：tar -jcv -f filename.tar.bz2 压缩的目录  
查询：tar -jtv -f filename.tar.bz2  
解压：tar -jxv -f filename.tar.bz2 -C 解压到的目录  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;zip-unzip&quot;&gt;zip, unzip&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;zip,unzip&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cat&quot;&gt;cat&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;cat&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat text | less 查看text文件中的内容  
注：这条命令也可以使用less text来代替 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;kill&quot;&gt;kill&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;kill&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kill命令用来终止程序，一般通过kill进程号的形式终止。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kill -signal PID 「常用方法」
「signal的常用参数」
1：SIGHUP，启动被终止的进程  
2：SIGINT，相当于输入ctrl+c，中断一个程序的进行  
9：SIGKILL，强制中断一个进程的进行  
15：SIGTERM，以正常的结束进程方式来终止进程  
17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行

「例子」
`以正常的结束进程方式来终止第一个后台工作，可用jobs命令查看后台中的第一个工作进程`
kill -SIGTERM %1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/ljianhui/article/details/11100625&quot;&gt;初窥Linux 之 我最常用的20条命令&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/Linux-Command/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/Linux-Command/</guid>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>在ubuntu上安装配置 shadowsocks</title>
        <description>&lt;h3 id=&quot;在ubuntu上安装配置-shadowsocks&quot;&gt;在ubuntu上安装配置 shadowsocks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;首先下载 python-pip 和 shadowsocks&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install python-pip
pip install shadowsocks
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;编辑 /etc/shadowsocks.json 的配置文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//服务器的ip地址&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;port_password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//设置不同的端口和密码&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;520&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;9184&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;local_address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;local_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;fast_open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;然后保持后台运行&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ssserver -c /etc/shadowsocks.json -d start

sudo ssserver -c /etc/shadowsocks.json -d stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;中途可能遇到的问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;保持后台运行 shaodowsocks 的命令失败，因为 shadowsocks 的版本小于2.6，2.6版本以后才有 -d 的命令&lt;/li&gt;
  &lt;li&gt;如果运行 shadowsocks 后，访问外网还是访问不上，那么通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ssserver -c /etc/shadowsocks.json start&lt;/code&gt;（该不是后台运行，通过这种方式运行后服务器不能进行其它操作，但是可以收集到访问网站的信息），再访问外网，然后查看收集到的信息，通过错误信息再分析问题。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 10 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/Install-Shadowsocks-On-Ubuntu/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/Install-Shadowsocks-On-Ubuntu/</guid>
        
        <category>安装教程</category>
        
        
      </item>
    
  </channel>
</rss>
